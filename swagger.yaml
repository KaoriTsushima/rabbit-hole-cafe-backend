openapi: 3.0.3
info:
  title: Rabbit Hole Caf√©
  description: |-
    This is the documentation for the APIs
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
  - name: unauthorized
    description: Can be called without a JWT token
  - name: authorized
    description: Must be called with a JWT token for the backend to know who the caller is
paths:
  /user:
    post:
      tags:
        - unauthorized
      summary: Create user
      description: Used to sign up as a new user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: bearista@rabbitholecafe.com
                password:
                  type: string
                  example: coffee

      responses:
        201:
          description: created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: email already exists
  /user/login:
    post:
      tags:
        - unauthorized
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: bearista@rabbitholecafe.com
                password:
                  type: string
                  example: coffee
      responses:
        '200':
          description: successful operation
          headers:
            set-cookie:
              description: jwt token
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    post:
      tags:
        - authorized
      summary: Logs out current logged in user session
      description: 'May not be needed - could just clear JWT token from cookies'
      operationId: logoutUser
      parameters: []
      responses:
        200:
          description: successful operation
  /user/favourite/{drinkId}:
    put:
      tags:
        - authorized
      summary: Add a new favourite drink
      description: ''
      parameters:
        - in: path
          name: drinkId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        401:
          description: unauthorized
    delete:
      tags:
        - authorized
      summary: Remove a favourite drink
      description: ''
      parameters:
        - in: path
          name: drinkId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        401:
          description: unauthorized
  /menu:
    get:
      tags:
        - unauthorized
      summary: Retrieves menu
      description: returns the menu
      operationId: getMenu
      responses:
        '200':
          description: menu items
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Drink'
  /order:
    post:
      tags:
        - authorized
      summary: Create an order
      description: create a order
      operationId: createOrder
      requestBody:
        description: list of drinks and quantity to order
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - quantity
                  - drinkId
                properties:
                  quantity:
                    type: number
                    example: 2
                  drinkId:
                    type: number
                    example: 3
      responses:
        201:
          description: order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        401:
          description: unauthorized

  /order/history:
    get:
      tags:
        - authorized
      summary: View order history
      description: retrieves order history
      operationId: retrieveHistory
      responses:
        '200':
          description: list of order history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        401:
          description: unauthorized

                
components:
  schemas:
    Order:
      type: object
      required:
        - datetime
        - transactionId
        - drinks
        - userId
      properties:
        datetime:
          type: number
          format: date
          example: 1694248721336
        transactionId:
          type: string
          example: f3fc8aa9-ce7f-4d67-a9dc-0289e3ddbda7
        drinks:
          type: object
          required:
            - quantity
            - drink
          properties:
            quantity:
              type: number
              example: 2
            drink:
              $ref: '#/components/schemas/Drink'
        userId:
          type: number
          example: 2
    Drink:
      type: object
      required:
        - id
        - type
        - name
        - description
        - price
        - size
        - tags
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          enum:
            - COFFEE
            - TEA
            - HOT_CHOCOLATE
            - SNACK_DESSERT
        name:
          type: string
          example: Espresso
        description:
          type: string
          example: Tasty coffee
        intensity:
          type: integer
          example: 11
        price:
          type: number
          format: currency
          example: 1.5
        size:
          type: number
          example: 40
        tags:
          type: array
          items:
            type: string
            enum:
              - D
              - V
              - VE
              - DF
              - NF
          example: [D, V]
    User:
      type: object
      required:
        - id
        - email
        - favourites
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          example: john@email.com
        favourites:
          type: array
          items:
            type: integer
          example: [1, 2, 3]
